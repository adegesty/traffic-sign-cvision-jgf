/**
 *
 *
 *
 */

#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>
#include <stdio.h>

using namespace std;
using namespace cv;



void smoothHistogram(Mat hist, int filterSize){
	
	float partSum = 0;

	for(int i = 0; i < hist.rows; i++){
		//Motherfucking grenseverdier
		int j_lower = (i >= filterSize/2 ? -(filterSize/2) : 0);
		int j_upper = (i <= hist.rows - filterSize/2 ? filterSize /2 : hist.rows-i);

		for(int j = j_lower; j <= j_upper; j++){
			partSum += hist.at<float>(i + j);
		}
		hist.at<float>(i) = partSum/filterSize;
		partSum = 0;
	}

}

/**
 * @function main
 */
int main( int argc, char** argv )
{
	Mat src, dst;
	if(argc < 2){
		src = imread("../../example_images/skilt_1.jpg", CV_LOAD_IMAGE_COLOR);
	}
	else{
		src = imread(argv[1], CV_LOAD_IMAGE_COLOR);
	}

	//Check for valid input
	if(!src.data){ 
		cout <<  "Could not open or find the image" << endl;
		return -1;
	}

	/// Separate the image in 3 places ( B, G and R )
	vector<Mat> bgr_planes;
	split( src, bgr_planes );

	/// Establish the number of bins
	int histSize = 256;

	/// Set the ranges ( for B,G,R) )
	float range[] = { 0, 256 } ;
	const float* histRange = { range };

	bool uniform = true; bool accumulate = false;

	Mat b_hist, g_hist, r_hist;

	/// Compute the histograms:
	calcHist( &bgr_planes[0], 1, 0, Mat(), b_hist, 1, &histSize, &histRange, uniform, accumulate );
	calcHist( &bgr_planes[1], 1, 0, Mat(), g_hist, 1, &histSize, &histRange, uniform, accumulate );
	calcHist( &bgr_planes[2], 1, 0, Mat(), r_hist, 1, &histSize, &histRange, uniform, accumulate );

	// Draw the histograms for B, G and R
	int hist_w = 512; int hist_h = 400;
	int bin_w = cvRound( (double) hist_w/histSize );

	Mat histImage( hist_h, hist_w, CV_8UC3, Scalar( 0,0,0) );

	/// Normalize the result to [ 0, histImage.rows ]
	normalize(b_hist, b_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat() );
	normalize(g_hist, g_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat() );
	normalize(r_hist, r_hist, 0, histImage.rows, NORM_MINMAX, -1, Mat() );
	
	smoothHistogram(r_hist, 7);	
	smoothHistogram(g_hist, 7);	
	smoothHistogram(b_hist, 7);	

	/// Draw for each channel
	for( int i = 1; i < histSize; i++ )
	{
		line( histImage, Point( bin_w*(i-1), hist_h - cvRound(b_hist.at<float>(i-1)) ) ,
				Point( bin_w*(i), hist_h - cvRound(b_hist.at<float>(i)) ),
				Scalar( 255, 0, 0), 2, 8, 0  );
		line( histImage, Point( bin_w*(i-1), hist_h - cvRound(g_hist.at<float>(i-1)) ) ,
				Point( bin_w*(i), hist_h - cvRound(g_hist.at<float>(i)) ),
				Scalar( 0, 255, 0), 2, 8, 0  );
		line( histImage, Point( bin_w*(i-1), hist_h - cvRound(r_hist.at<float>(i-1)) ) ,
				Point( bin_w*(i), hist_h - cvRound(r_hist.at<float>(i)) ),
				Scalar( 0, 0, 255), 2, 8, 0  );
	}

/*
	float currentHighestValue = 0;
	int currentHighestIndex = 0;
//	for(int i = 0; i < 5; i++){
		for (int j = 0; j < r_hist.rows; j++){
			if(r_hist.at<float>(j) > currentHighestValue){
				currentHighestValue = r_hist.at<float>(j);
				currentHighestIndex = j;
			}
		}
		int lowerPeakBound = currentHighestIndex;
		int upperPeakBound = currentHighestIndex;
		line(histImage, Point(bin_w*currentHighestIndex-1,hist_h), Point(bin_w*currentHighestIndex -1, 0), Scalar(0,0,255), 2);
		while(r_hist.at<float>(lowerPeakBound-1) <  r_hist.at<float>(lowerPeakBound)){
			lowerPeakBound--;
		}
		line(histImage, Point(bin_w*lowerPeakBound-1,hist_h), Point(bin_w*lowerPeakBound -1, 0), Scalar(0,0,255));
		while(r_hist.at<float>(upperPeakBound+1) <  r_hist.at<float>(upperPeakBound)){
			upperPeakBound++;
		}
		line(histImage, Point(bin_w*upperPeakBound -1,hist_h), Point(bin_w*upperPeakBound -1, 0), Scalar(0,0,255));

		Mat thresholded;

		threshold(src, thresholded, lowerPeakBound, 0, THRESH_TOZERO);

		threshold(thresholded, thresholded, upperPeakBound, 0, THRESH_TOZERO_INV);

		MatIterator_<Vec3f> it, end;
		for(it = src.begin<Vec3f>(), end = src.end<Vec3f>(); it != end; ++it){
			for(int j = lowerPeakBound; j <= upperPeakBound; j++){
				if((int)((*it)[2]) == j){
					(*it)[0] = 0;
					(*it)[1] = 0;
					(*it)[2] = 0;
				}
			}
		}*/
//	}


	/// Display
	namedWindow("calcHist Demo", CV_WINDOW_AUTOSIZE );
	imshow("calcHist Demo", histImage );

	imshow("Source image", src );
//	imshow("Threshold", thresholded);
	waitKey(0);

	return 0;

}
